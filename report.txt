Group:
Chu Xi Huang, 998912262, CDF account: c4huangd
Xiuyan Yu, 1000756719, CDF account: c5yuxiuy


Submission Description
------------------------
Part A:
The ray-square intersection was done by intersecting the ray vector with the x-y plane. When the x, y values of the ray vector were inside the boundary of the x-y plane, the intersection was found.
The ray-sphere intersection was done by solving the sphere equation and the ray vector algebraically. 
Phong shading was done by calculating the diffuse, specular and ambient components with normal, camera, reflection and light vectors.
Anti-aliasing was done by using a uniformly distributed grid sampling algorithm. An integer "anti-aliasing dimension" variable was defined such that for each pixel, the total number of rays used was dimension squared, and the output colour was the average of that pixel's samplign rays. For the output BMP files submitted, the dimension variable was 5 (and thus 25 rays were used to shade each pixel).

Part B:
The main character model was obtained from TurboSquid in the form of an OBJ file, which was parsed and redrawn using OpenGL into seven separate parts: chest, head, left arm, left leg, right arm, right leg, and badge.
Control variables for the positioning of parts, as well as lights and camera were added.
An animation tool inspired from Assignment 2 was created to control the scene's degrees of freedom. The user interface was used to save keyframes to file, which were interpolated to create movement.
Cubic interpolation was used for animation smoothness. Four points, p0, p1, p2 and p3 were first found, and time was calculated between p1 and p2. Then the coefficient a0, a1, a2 and a3 were calculated by applying the corresponding formulas. At the beginning of the spline and the end of the spline where four distinct points could not be found, the first point and the last point were duplicated to make up for four points. For example, at the beginning of the spline, p0 = p1.

TODO: For submission purposes, the animation tool was removed and replaced with a simple user interface for loading keyframes and playing the animation.


Files
------------------------
Part A - Program:
raytracer.cpp
raytracer.h
light_source.cpp
light_source.h
bmp_io.cpp
bmp_io.h
scene_object.cpp
scene_object.h
util.cpp
util.h
makefile

Part A - Output Files:




Part B - Program:
main.cpp
objloader.cpp
objloader.h
keyframe.h
vector.cpp
vector.h
timer.h
Makefile

Part B - Model and Other Files:
keyframes.txt
baymax.obj
chestbelly.obj
head.obj
leftarm.obj
leftleg.obj
rightarm.obj
rightleg.obj
stamp.obj

External Resources
------------------------
http://www.opengl-tutorial.org/beginners-tutorials/tutorial-7-model-loading/
http://www.turbosquid.com/3d-models/free-max-mode-baymax-big-hero-6/881191/
https://steveharveynz.wordpress.com/category/programming/c-raytracer/

Role of Each Member
------------------------
Chi Xi Huang:
Implemented ray casting, ray-sphere and ray-square intersections, and Phong shading for Part A.
Implemented cubic interpolation between keyframes for Part B's animation.

Xiuyan Yu:
Implemented anti-aliasing for Part A and generated three required renders of the scene.
Imported model into OpenGL and designed transformations for joint articulation.
